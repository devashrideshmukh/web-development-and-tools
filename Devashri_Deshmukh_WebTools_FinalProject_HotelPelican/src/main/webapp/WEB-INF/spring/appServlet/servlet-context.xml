<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
		">




	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!--Free Marker -->
	<beans:bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<beans:property name="templateLoaderPath" value="/WEB-INF/views/FREEMARKER/">
		</beans:property>
	</beans:bean>

	<beans:bean id="freemarkerViewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<beans:property name="cache" value="true" />
		<beans:property name="prefix" value="" />
		<beans:property name="suffix" value=".ftl" />
		<beans:property name="order" value="1" />
	</beans:bean>


	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<beans:property name="prefix" value="/WEB-INF/views/JSP/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3" />
	</beans:bean>


	<!-- Velocity -->
	<beans:bean id="velocityConfig"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<beans:property name="resourceLoaderPath" value="/WEB-INF/views/VELOCITY/" />
	</beans:bean>

	<beans:bean id="velocityViewResolver"
		class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<beans:property name="cache" value="true" />
		<beans:property name="prefix" value="" />
		<beans:property name="suffix" value=".vsl" />
		<beans:property name="order" value="2" />
	</beans:bean>

	<!-- <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
		/> <beans:property name="prefix" value="/WEB-INF/views/JSP/" /> <beans:property 
		name="suffix" value=".jsp" /> <beans:property name="order" value="2" /> </beans:bean> 
		<beans:bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer"> 
		<beans:property name="resourceLoaderPath" value="/WEB-INF/views/VELOCITY/" 
		/> </beans:bean> <beans:bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver"> 
		<beans:property name="cache" value="true" /> <beans:property name="prefix" 
		value="" /> <beans:property name="suffix" value=".vsl" /> <beans:property 
		name="order" value="1" /> </beans:bean> -->
	<!-- <mvc:interceptors> <beans:bean class="com.neu.webTools.hotelPelican.RequestInterceptor" 
		/> </mvc:interceptors> -->





	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<beans:property name="maxUploadSize" value="100000" />
	</beans:bean>



	<mvc:resources mapping="/resources/**" location="/resources/myTheme/" />

	<mvc:annotation-driven />

	<mvc:resources location="file:${catalina.home}/images/"
		mapping="/images/**" />

	<!-- detect classes with @Controller annotation in package` -->
	<context:component-scan base-package="com.neu.webTools.hotelPelican" />



</beans:beans>
